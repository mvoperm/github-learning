/* ПОЛУЧЕНИЕ ДАННЫХ ИЗ ФАЙЛА JSON ТРЕМЯ СПОСОБАМИ: (1) CALLBACH / XHR, (2) PROMISE, (3) ASYNC / AWAIT */

const cssRulesList = ['basic_hue', 'article_transparency', 'bg_image', 'basic_font_type', 'basic_font_size',];

// (1) callback, XHR
let loadDoc = function(url, cFunction) {
  let xhttp;
  xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      cFunction(this);
    }
  };
  xhttp.open("GET", url, true);
  xhttp.send();
};
let getJson = function(xhttp) {
  let str = xhttp.responseText;
  let jsonObj = JSON.parse(str);
  cssRulesList.forEach((item, index) => {
    article.cssproperties.push({ id: index, text: jsonObj[item] });
  });
  console.log(str);
};
loadDoc('../data/data.json', getJson);

// (2) promise
fetch('../data/data.json')
    .then((response) => {return response.json();})
    .then((jsonObj) => {
      cssRulesList.forEach((item, index) => {
        article.cssproperties.push({ id: index, text: jsonObj[item] });
      });
      console.log(JSON.stringify(jsonObj));
    });

// (3) async / await
(async () =>	{
  let jsonFile = await fetch('../data/data.json');
  let jsonObj = await jsonFile.json();
  cssRulesList.forEach((item, index) => {
    article.cssproperties.push({ id: index, text: jsonObj[item] });
  });
  console.log(JSON.stringify(jsonObj));
})();
